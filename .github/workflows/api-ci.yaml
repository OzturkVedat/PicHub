name: Build and Push API Image

on:
  workflow_dispatch:

  push:
    branches:
      - master
    paths:
      - "PicHub.API/**" # trigger when API code changes

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: false

jobs:
  lint:
    name: Analyze .NET Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Restore Dependencies
        run: dotnet restore PicHub.API/PicHub.API.csproj

      - name: Run .NET Code Analysis
        run: dotnet build PicHub.API/PicHub.API.csproj --no-restore --configuration Release

  build_and_push:
    runs-on: ubuntu-latest
    name: Build and Push Docker Image
    needs: lint

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: .buildx-cache
          key: ${{runner.os}}-buildx-${{github.sha}}
          restore-keys: |
            ${{runner.os}}-buildx-x

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./PicHub.API
          file: ./PicHub.API/Dockerfile
          push: true
          tags: ${{secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{secrets.AWS_REGION}}.amazonaws.com/pichub/api:latest
          cache-from: type=local,src=.buildx-cache
          cache-to: type=local,dest=.buildx-cache
          platforms: linux/amd64

      - name: Delete untagged images from repo
        run: |
          REPO_NAME=pichub/api
          REGION=${{ secrets.AWS_REGION }}

          UNTAGGED_DIGESTS=$(aws ecr list-images \
            --repository-name $REPO_NAME \
            --filter tagStatus=UNTAGGED \
            --query 'imageIds[*].imageDigest' \
            --output text \
            --region $REGION)

          if [ -n "$UNTAGGED_DIGESTS" ]; then
            for digest in $UNTAGGED_DIGESTS; do
              echo "Deleting untagged image: $digest"
              aws ecr batch-delete-image \
                --repository-name $REPO_NAME \
                --image-ids imageDigest=$digest \
                --region $REGION
            done
          else
            echo "No untagged images to delete."
          fi
